
/*使用说明  :
 *
 *
 * table id
 * 不传 默认所有列可以点击排序
 * 传那几列 排序那几列
 new TableSorter("tb1",0,1,2,3);
 */



function TableSorter(table){
    this.Table = this.$(table);
    if(this.Table == null && this.Table.rows.length <= 1){
        return;
    }
    var args = [];
    if(arguments.length > 1){
        for(var x = 1; x < arguments.length; x++){
            args.push(arguments[x]);
        }
    }
    this.Init(args);
}

TableSorter.prototype = {
    $ : function(element){//简写document.getElementById
        return document.getElementById(element);
    },
    Init : function(args){//初始化表格的信息和操作
        this.Rows = [];
        this.Header = [];
        this.ViewState = [];
        this.LastSorted = null;
        this.NormalCss = "";//默认
        this.SortAscCss = "sorted ascending";//升序
        this.SortDescCss = "sorted descending"; //降序
        for(var x = 0; x < this.Table.rows.length; x++){
            this.Rows.push(this.Table.rows[x]);
        }
        this.Header = this.Rows.shift().cells;
        for(var x = 0; x < (args.length ? args.length : this.Header.length); x++){
            var rowIndex = args.length ? args[x] : x;
            if(rowIndex >= this.Header.length)
            {
                continue;
            }
            this.ViewState[rowIndex] = false;
            this.Header[rowIndex].style.cursor = "pointer";
            this.Header[rowIndex].onclick = this.GetFunction(this, "Sort", rowIndex);
        }
    },
    GetFunction : function(variable,method,param){
        return function(){
            variable[method](param);
        }
    },
    Sort : function(column){
        if(this.LastSorted){
            this.LastSorted.className = this.NormalCss;
        }
        var SortAstype = " ";
        for(var x = 0; x < this.Rows.length && SortAstype; x++){
            SortAstype = this.isNotDate(this.delHtmlTag(this.Rows[x].cells[column].innerHTML));
        }
        this.Rows.sort(function(row1, row2){
            var result;
            var value1,value2;
            value1 = TableSorter.prototype.IsConover(TableSorter.prototype.delHtmlTag(row1.cells[column].innerHTML),SortAstype);
            value2 = TableSorter.prototype.IsConover(TableSorter.prototype.delHtmlTag(row2.cells[column].innerHTML),SortAstype);
            return ((value1 < value2) ? -1 : ((value1 > value2) ? 1 : 0));
        })
        if(this.ViewState[column]){
            this.Rows.reverse();
            this.ViewState[column] = false;
            this.Header[column].className = this.SortDescCss;
            console.log($(this.Header[column]).find("i").find("img"))
            $('i').find("img").attr("src",'/image/nothing.png');
            $(this.Header[column]).find("i").find("img").attr("src",'/image/down.png')
        }else{
            this.ViewState[column] = true;
            this.Header[column].className = this.SortAscCss;
            console.log($(this.Header[column]).find("i").find("img"))
            $('i').find("img").attr("src",'/image/nothing.png');
            $(this.Header[column]).find("i").find("img").attr("src",'/image/up.png')
        }
        this.LastSorted = this.Header[column];
        var frag = document.createDocumentFragment();
        for(var x = 0; x < this.Rows.length; x++){
            frag.appendChild(this.Rows[x]);
        }
        this.Table.tBodies[0].appendChild(frag);
        this.OnSorted(this.Header[column], this.ViewState[column]);
    },
    IsConover : function (Tabledate,SortAstype){
        switch(SortAstype) {
            case "T-int":
                if(Tabledate=="--")Tabledate = -999;
                return parseInt(Tabledate);
            case "T-float":
                if(Tabledate=="--")Tabledate = -999;
                return parseFloat(Tabledate);
            case "T-date":
                if(Tabledate=="--")Tabledate = 1970-01-01;
                return new Date(Date.parse(Tabledate));
            default:
                return Tabledate.toString();
        }
    },
    ip2int : function (ip) {
        var num = 0;
        ip = ip.split(".");
        num = Number(ip[0]) * 256 * 256 * 256 + Number(ip[1]) * 256 * 256 + Number(ip[2]) * 256 + Number(ip[3]);
        return num;
    },
    isNotDate : function (Tabledate){
        // yyyy-mm-dd
        var $date_yyyy_mm_dd = /^[1-9]\d{3}[-/.](0[1-9]|1[0-2])[-/.](0[1-9]|[1-2][0-9]|3[0-1])$/;
        var regExp_yyyy_mm_dd = new RegExp($date_yyyy_mm_dd);
        // yyyy-mm
        var $date_yyyy_mm = /^[1-9]\d{3}[-/.](0[1-9]|1[0-2])$/;
        var regExp_yyyy_mm = new RegExp($date_yyyy_mm);
        // mm-dd
        var $date_mm_dd = /^(0[1-9]|1[0-2])[-/.](0[1-9]|[1-2][0-9]|3[0-1])$/;
        var regExp_mm_dd = new RegExp($date_mm_dd);

        if(regExp_yyyy_mm_dd.test(Tabledate)){
            return "T-date";
        }
        if(regExp_yyyy_mm.test(Tabledate)){
            return "T-date";
        }
        if(regExp_mm_dd.test(Tabledate)){
            return "T-date";
        }
        if(Tabledate=="--"){
            return "T-float"
        }
        if(Tabledate.indexOf(".")==-1){
            return "T-int"
        }else if(Tabledate.indexOf(".")!=-1){
            return "T-float"
        }
    },
    delHtmlTag : function (str){
        return str.replace(/<[^>]+>/g,"");//去掉所有的html标记
    },
    IsNumeric : function(num){//验证是否是数字类型.
        return /^\d+(\.\d+)?$/.test(num);
    },
    OnSorted : function(cell, IsAsc){//排序完后执行的方法.cell:执行排序列的表头单元格,IsAsc:是否为升序排序.
        return;
    },
}